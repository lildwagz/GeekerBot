import json
import re
import urllib


config_path = "config.json"

with open(config_path) as config_file:
    config = json.loads(config_file.read())


def get_string(key):
    return config[key]


exploitdb_strings = get_string("exploit_db")

#############
# Variables #
#############

# flag to get request parameter
params = {
    "title": "&q=",
    "cve": "&cve=",
    "type": "&type=",
    "platform": "&platform=",
    "port": "&port=",
    "content": "&text=",
    "author": "&e_author=",
    "tag": "&tag=",
}

# allowed platforms
platforms = "aix", "alpha", "android", "arm", "ashx", "asp", "aspx", "atheos", "beos", "bsd", "bsdi_x86", "bsd_ppc", \
            "bsd_x86", "cfm", "cgi", "ezine", "freebsd", "freebsd_x86", "freebsd_x86-64", "generator", "hardware", \
            "hp-ux", "immunix", "ios", "irix", "java", "json", "jsp", "linux", "linux_crisv32", "linux_mips", \
            "linux_ppc", "linux_sparc", "linux_x86", "linux_x86-64", "lua", "macos", "magazine", "minix", "multiple", \
            "netbsd_x86", "netware", "nodejs", "novell", "openbsd", "openbsd_x86", "osx", "osx_ppc", "palm_os", \
            "perl", "php", "plan9", "python", "qnx", "ruby", "sco", "sco_x86", "solaris", "solaris_mips", \
            "solaris_sparc", "solaris_x86", "superh_sh4", "system_z", "tru64", "ultrix", "unix", "unixware", \
            "vxworks", "watchos", "windows", "windows_x86", "windows_x86-64", "xml"

# allowed types
types = "dos", "local", "remote", "shellcode", "papers", "webapps"

# tags for help
tags_help = {
    "Wordpress Core": "Wordpress Core", "Metasploit": "msf", "Wordpress Plugin": "Wordpress Plugin",
    "SQL Injection": "SQLi", "Cross-Site Scripting": "xss", "file inclusion": "fi",
    "Cross-Site Request Forgery": "CSRF", "Denial of Service": "dos", "command injection": "command injection",
    "authentication/credential bypass": "ac/bc", "Client Side": "Client Side", "Use after Free": "UAF",
    "Out of bounds": "out of bounds", "remote": "remote", "local": "local", "XML external entity": "XEE",
    "integer overflow": "integer overflow", "server-side request forgery": "ssrf", "race condition": "race condition",
    "NULL Pointer Dereference": "nullpointer", "malware": "malware", "buffer overflow": "buffer overflow",
    "heap overflow": "heap overflow", "type confusion": "type confusion", "object injection": "object injection",
    "bug report": "bug report", "console": "console", "Pwn2Own": "Pwn2Own", "traversal": "traversal",
    "deserialization": "deserialization",
}

# tags to tag number
tags = {
    "wordpress core": 1,
    "msf": 3,
    "wordpress plugin": 4,
    "sqli": 7,
    "xss": 8,
    "fi": 9,
    "csrf": 12,
    "dos": 13,
    "code injection": 14,
    "command injection": 15,
    "ac/cb": 16,
    "client side": 18,
    "uaf": 19,
    "out of bounds": 20,
    "remote": 21,
    "local": 22,
    "xxe": 23,
    "integer overflow": 24,
    "ssrf": 25,
    "race condition": 26,
    "nullpointer": 27,
    "malware": 28,
    "buffer overflow": 31,
    "heap overflow": 34,
    "type confusion": 35,
    "object injection": 36,
    "bug report": 37,
    "console": 38,
    "pwn2own": 39,
    "traversal": 40,
    "deserialization": 41,
}

data_params = '&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsea' \
              'rchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0' \
              '%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&' \
              'columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5' \
              'Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&colum' \
              'ns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D' \
              '=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3' \
              '%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%' \
              '5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex' \
              '%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5B' \
              'searchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns' \
              '%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_i' \
              'd&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%' \
              '5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%' \
              '5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&' \
              'columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bd' \
              'ata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%' \
              '5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=' \
              'false&order%5B0%5D%5Bcolumn%5D=0&order%5B0%5D%5Bdir%5D=desc&start=0&length=4&search%5Bvalue%5D=&sear' \
              'ch%5Bregex%5D=false'


#############
# Functions #
#############

def parse_flag(flag):
    flag_p = flag.split(" ")[0]
    parameters = flag[len(flag_p) + 1:]
    if flag_p == "platform" and parameters not in platforms:
        return "! platform"
    if flag_p == "type" and parameters not in types:
        return '! types'
    if flag_p == "tag" and parameters not in tags:
        return '! tag'
    if flag_p not in params.keys():
        return False
    if flag_p == 'tag':
        parameters = str(tags[parameters])
    return params[flag_p] + urllib.parse.quote(parameters)


def get_get_request(query):
    query = " " + query
    if " -" not in query:
        if re.match(r"cve-\d{4}-\d{4,7}", query.replace(" ", "")) or re.match(r"\d{4}-\d{4,7}", query.replace(" ", "")):
            return "?cve=" + urllib.parse.quote(query[1:])
        return "?q=" + urllib.parse.quote(query[1:])
    query = list(filter(None, query.split(" -")))
    request = ''
    for flag in query:
        parsed = parse_flag(flag)
        if not parsed or parsed.split(" ")[0] == '!':
            return parsed
        request += parsed
    return str(request.replace('&', '?', 1))
